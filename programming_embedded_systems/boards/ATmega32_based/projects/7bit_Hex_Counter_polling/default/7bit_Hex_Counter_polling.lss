
7bit_Hex_Counter_polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003d  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001a9  00000000  00000000  000001af  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000110  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f5  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ef  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005b  00000000  00000000  0000078f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

void USART_init(unsigned int);
void USART_transmit(unsigned char);

int main(void)
{
  92:	80 b5       	in	r24, 0x20	; 32
  94:	80 bd       	out	0x20, r24	; 32

void USART_init(unsigned int baudrate)
{
    // Setting baud rate 
	UBRRH	|= 	(0 << URSEL);
	UBRRH 	 =	(unsigned char)(baudrate >> 8);
  96:	10 bc       	out	0x20, r1	; 32
	UBRRL 	 =	(unsigned char)baudrate;
  98:	87 e6       	ldi	r24, 0x67	; 103
  9a:	89 b9       	out	0x09, r24	; 9
	
	// Enable the transmitter and receiver
	UCSRB |= (1 << RXEN) | (1 << TXEN);	
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	88 61       	ori	r24, 0x18	; 24
  a0:	8a b9       	out	0x0a, r24	; 10
  	unsigned int baudrate = 103;	// 12-bits can be set out of the 16-bits available 
									
	// Initialize the USART
	USART_init(baudrate);
	
	DDRB = 0xFF;	
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	87 bb       	out	0x17, r24	; 23
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	20 e8       	ldi	r18, 0x80	; 128
  aa:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ac:	60 e1       	ldi	r22, 0x10	; 16
  ae:	77 e2       	ldi	r23, 0x27	; 39
  	while(1)
	{
		//Counter from 0 to 127
		for (var_a = 0;	var_a <= 127; var_a++)
		{
			PORTB	=	var_a;
  b0:	48 bb       	out	0x18, r20	; 24
  b2:	cb 01       	movw	r24, r22
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x22>
			_delay_loop_2 (10000);
			USART_transmit (PORTB);
  b8:	88 b3       	in	r24, 0x18	; 24

void USART_transmit (unsigned char var_a)
{
	
	// Setting the parameters for USART transmission
	while (!(UCSRA & (1 << UDRE)));
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <main+0x28>

	UDR = var_a;
  be:	8c b9       	out	0x0c, r24	; 12
	DDRB = 0xFF;	

  	while(1)
	{
		//Counter from 0 to 127
		for (var_a = 0;	var_a <= 127; var_a++)
  c0:	4f 5f       	subi	r20, 0xFF	; 255
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	a1 f7       	brne	.-24     	; 0xb0 <main+0x1e>
  c8:	24 2f       	mov	r18, r20
  ca:	40 e1       	ldi	r20, 0x10	; 16
  cc:	57 e2       	ldi	r21, 0x27	; 39
		}

		//Counter from 127 to 0
		for (var_b = var_a;	var_b >= 0; --var_b)
		{
			PORTB	=	var_b;
  ce:	28 bb       	out	0x18, r18	; 24
  d0:	ca 01       	movw	r24, r20
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x40>
			_delay_loop_2 (10000);
			USART_transmit (PORTB);
  d6:	88 b3       	in	r24, 0x18	; 24

void USART_transmit (unsigned char var_a)
{
	
	// Setting the parameters for USART transmission
	while (!(UCSRA & (1 << UDRE)));
  d8:	5d 9b       	sbis	0x0b, 5	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <main+0x46>

	UDR = var_a;
  dc:	8c b9       	out	0x0c, r24	; 12
			_delay_loop_2 (10000);
			USART_transmit (PORTB);
		}

		//Counter from 127 to 0
		for (var_b = var_a;	var_b >= 0; --var_b)
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	f6 cf       	rjmp	.-20     	; 0xce <main+0x3c>

000000e2 <USART_init>:

  	return 0;
}

void USART_init(unsigned int baudrate)
{
  e2:	20 b5       	in	r18, 0x20	; 32
  e4:	20 bd       	out	0x20, r18	; 32
    // Setting baud rate 
	UBRRH	|= 	(0 << URSEL);
	UBRRH 	 =	(unsigned char)(baudrate >> 8);
  e6:	90 bd       	out	0x20, r25	; 32
	UBRRL 	 =	(unsigned char)baudrate;
  e8:	89 b9       	out	0x09, r24	; 9
	
	// Enable the transmitter and receiver
	UCSRB |= (1 << RXEN) | (1 << TXEN);	
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	88 61       	ori	r24, 0x18	; 24
  ee:	8a b9       	out	0x0a, r24	; 10
}
  f0:	08 95       	ret

000000f2 <USART_transmit>:

void USART_transmit (unsigned char var_a)
{
  f2:	5d 9b       	sbis	0x0b, 5	; 11
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <USART_transmit>
	
	// Setting the parameters for USART transmission
	while (!(UCSRA & (1 << UDRE)));

	UDR = var_a;
  f6:	8c b9       	out	0x0c, r24	; 12
}
  f8:	08 95       	ret

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
